
#include <stdio.h>
#define MAX 100

char stack[MAX];
int top = -1;

void push(char c)
{
    if (top >= (MAX - 1))
    {
        printf("Stack overflow \n");
        return;
    }
    top = top + 1;
    stack[top] = c;
}

char pop()
{
    char c;
    if (top == -1)
    {
        return '0';
    }
    c = stack[top];
    top = top - 1;
    return c;
}

char peek()
{
    if (top >= 0)
    {
        return stack[top];
    }
    else
    {
        return '0';
    }
}

int precedence(char c)
{
    if (c == '^')
    {
        return 3;
    }
    else if (c == '*' || c == '/')
    {
        return 2;
    }
    else if (c == '+' || c == '-')
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

int isOperand(char c)
{
    if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9'))
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

void infixToPostfix(char infix[], char postfix[])
{
    int i = 0;
    int k = 0;
    char c;

    while (infix[i] != '\0')
    {
        c = infix[i];

        if (isOperand(c))
        {
            postfix[k++] = c;
        }
        else if (c == '(')
        {
            push(c);
        }
        else if (c == ')')
        {
            while (top != -1 && peek() != '(')
            {
                postfix[k++] = pop();
            }
            if (peek() == '(')
            {
                pop();
            }
        }
        else
        {
            while (top != -1 && precedence(peek()) >= precedence(c))
            {
                postfix[k++] = pop();
            }
            push(c);
        }
        i++;
    }

    while (top != -1)
    {
        postfix[k++] = pop();
    }

    postfix[k] = '\0';
}

int main()
{
    char infix[MAX], postfix[MAX];

    printf("Enter infix expression: ");
    scanf("%s", infix);

    infixToPostfix(infix, postfix);

    printf("Postfix expression: %s \n", postfix);

    return 0;
}


![DSLAB2_OUTPUT](LAB2/DSLAB2_OUTPUT.png)


